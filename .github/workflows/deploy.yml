# This workflow will do a clean install of node dependencies, build the source code and run tests
name: Test React App CI / CD

# What events will trigger this workflow
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    # array of node versions this job will use
    strategy:
      matrix:
        # node-version: [10.x, 12.x, 14.x]
        node-version: [10.x]

    steps:
      - name: Checkout repo under GITHUB_WORKSPACE
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Clean install node modules
        run: npm ci

      # Use the folowing steps to run tests and code coverage without sonarcloud
      # - name: Install jest junit reporter
      #   run: npm install -D jest-junit-reporter
      # - name: Run unit tests
      #   run: npm run test:ci
      # - name: Publish Unit Test Results
      #   uses: EnricoMi/publish-unit-test-result-action@v1.3
      #   if: always()
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     check_name: Unit Test Results
      #     files: test-report.xml
      #     report_individual_runs: true
      # - name: Publish code coverage report
      #   uses: 5monkeys/cobertura-action@master
      #   with:
      #     path: "**/cobertura-coverage.xml"
      #     repo_token: ${{ secrets.GITHUB_TOKEN }}
      #     minimum_coverage: 25

      # Use these steps to run tests and send report to sonarcloud for code coverage
      - name: Install jest Sonar reporter
        run: npm install -D jest-sonar-reporter
      - name: Run Sonar Test Coverage
        run: |
          npm run test:sonar
          sed -i 's+/home/runner/work/test-workflow/test-workflow+/github/workspace+g' ./coverage/lcov.info
          sed -i 's+/home/runner/work/test-workflow/test-workflow+/github/workspace+g' ./testResults/sonar-report.xml
          more ./coverage/lcov.info
          more ./testResults/sonar-report.xml
      - name: Run Sonacloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Build the project if all tests passed
      - name: build the project
        run: npm run build --if-present

      # Get login info from AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build the docker image with Nginx
        id: build-image
        run: |
          IMAGE_TAG=build-$(echo $GITHUB_RUN_ID)
          docker build -t ${{ secrets.AWS_ECR_IMAGE }}:$IMAGE_TAG .
          docker push ${{ secrets.AWS_ECR_IMAGE }}:$IMAGE_TAG
          echo "::set-output name=image::${{ secrets.AWS_ECR_IMAGE }}:$IMAGE_TAG"

      # - name: Push the image into AWS ECR
      #   run: |
      #     IMAGE_TAG=build-$(echo $GITHUB_RUN_ID)
      #     docker push ${{ secrets.AWS_ECR_IMAGE }}:$IMAGE_TAG

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition production-test-app-task-definition --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: production-test-app
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: production-test-app-service
          cluster: production-test-app-cluster
          wait-for-service-stability: true
